# Generated by Django 3.1.6 on 2021-06-07 19:59

from django.db import migrations

def load_organizations(apps, schema_editor):
    Organization = apps.get_model('resources', 'Organization')
    pass

def load_profile_roles(apps, schema_editor):
    ProfileRole = apps.get_model('resources', 'ProfileRole')

    ProfileRole.objects.get_or_create(pk=1, name='Student', active=True)
    ProfileRole.objects.get_or_create(pk=2, name='Educator', active=True)
    pass

def load_profile_populations(apps, schema_editor):
    ProfilePopulation = apps.get_model('resources', 'ProfilePopulation')

    ProfilePopulation.objects.get_or_create(pk=1, name='Primary', active=True, underrepresented=False)
    ProfilePopulation.objects.get_or_create(pk=2, name='Secondary', active=True, underrepresented=False)
    ProfilePopulation.objects.get_or_create(pk=3, name='College', active=True, underrepresented=False)
    ProfilePopulation.objects.get_or_create(pk=4, name='Adult', active=True, underrepresented=False)
    ProfilePopulation.objects.get_or_create(pk=5, name='Other', active=True, underrepresented=False)
    ProfilePopulation.objects.get_or_create(pk=6, name='None', active=True, underrepresented=False)

def load_devices(apps, schema_editor):
    Device = apps.get_model('resources', 'Device')

    Device.objects.get_or_create(pk=1, name='IPhone', active=True)
    Device.objects.get_or_create(pk=2, name='Desktop/Laptop', active=True)
    Device.objects.get_or_create(pk=3, name='Chromebook', active=True)
    Device.objects.get_or_create(pk=4, name='IPad', active=True)
    Device.objects.get_or_create(pk=5, name='Android Tablet', active=True)
    Device.objects.get_or_create(pk=6, name='Android Phone', active=True)
    Device.objects.get_or_create(pk=7, name='Raspberry Pi', active=True)
    Device.objects.get_or_create(pk=8, name='Microcontrollers', active=True)

def load_resource_statuses(apps, schema_editor):
    ResourceStatus = apps.get_model('resources', 'ResourceStatus')

    ResourceStatus.objects.get_or_create(pk=1, name='Proposed',
                                         description='Resource has been proposed and is in review.', active=True,
                                         sequence=1)
    ResourceStatus.objects.get_or_create(pk=2, name='Accepted',
                                         description='Resource has been reviewed and accepted.', active=True,
                                         sequence=2)
    ResourceStatus.objects.get_or_create(pk=3, name='Rejected',
                                         description='Resource has been reviewed and rejected.', active=True,
                                         sequence=3)
    ResourceStatus.objects.get_or_create(pk=4, name='Withdrawn',
                                         description='Resource has been withdrawn from review.', active=True,
                                         sequence=4)


def load_signup_choices(apps, schema_editor):
    SignupChoice = apps.get_model('resources', 'SignupChoice')

    SignupChoice.objects.get_or_create(pk=1, name='Create Account', description='Must create an account', active=True)
    SignupChoice.objects.get_or_create(pk=2, name='Provide Email', description='Must provide email address', active=True)
    SignupChoice.objects.get_or_create(pk=3, name='No Requirement', description='No sign up requirement', active=True)

def load_resource_types(apps, schema_editor):
    ResourceType = apps.get_model('resources', 'ResourceType')

    ResourceType.objects.get_or_create(pk=1, name='Platform or App',
                                       description='Resource is specific to a platform or app', active=True)
    ResourceType.objects.get_or_create(pk=2, name='Curriculum',
                                       description='Resource is intended to be part of a curriculum.', active=True)
    ResourceType.objects.get_or_create(pk=3, name='Tutorial',
                                       description='Resource is part of a tutorial course.', active=True)
    ResourceType.objects.get_or_create(pk=4, name='Book',
                                       description='Resource is included as part of a book.', active=True)
    ResourceType.objects.get_or_create(pk=5, name='Worked Example',
                                       description='Resource is part of a worked example.', active=True)
    ResourceType.objects.get_or_create(pk=6, name='Documentation',
                                       description='Resource is part of documentation.', active=True)


def load_resource_audiences(apps, schema_editor):
    ResourceAudience = apps.get_model('resources', 'ResourceAudience')

    ResourceAudience.objects.get_or_create(pk=1, name='K-12', description='K-12', active=True)
    ResourceAudience.objects.get_or_create(pk=2, name='Higher Education', description='College/Secondary School', active=True)
    ResourceAudience.objects.get_or_create(pk=3, name='Professional Training', description='Meant for professionals', active=True)
    ResourceAudience.objects.get_or_create(pk=4, name='General', description='General audience', active=True)

def load_resource_use_types(apps, schema_editor):
    ResourceUseType = apps.get_model('resources', 'ResourceUseType')

    ResourceUseType.objects.get_or_create(pk=1, name='Open Source Project',
                                          description='Open Source Project - accepts contributions', active=True)
    ResourceUseType.objects.get_or_create(pk=2, name='Open Education Resource',
                                          description='Open Education Resource - ok to distribute and/or revise/remix.', active=True)
    ResourceUseType.objects.get_or_create(pk=3, name='Free Resource',
                                          description='Free Resource - Free to use', active=True)
    ResourceUseType.objects.get_or_create(pk=4, name='Freemium',
                                          description='Freemium - significant portion of resource free to use', active=True)
    ResourceUseType.objects.get_or_create(pk=5, name='Paid',
                                          description='Paid - costs money to access this resource', active=True)


def load_resource_languages(apps, schema_editor):
    ResourceLanguage = apps.get_model('resources', 'ResourceLanguage')

    ResourceLanguage.objects.get_or_create(pk=1, name='Python', description='Best language ever!', active=True)


class Migration(migrations.Migration):

    dependencies = [
        ('resources', '0013_auto_20210521_0415'),
    ]

    operations = [
        migrations.RunPython(load_organizations),
        migrations.RunPython(load_profile_roles),
        migrations.RunPython(load_profile_populations),
        migrations.RunPython(load_devices),
        migrations.RunPython(load_resource_statuses),
        migrations.RunPython(load_signup_choices),
        migrations.RunPython(load_resource_types),
        migrations.RunPython(load_resource_audiences),
        migrations.RunPython(load_resource_use_types),
        migrations.RunPython(load_resource_languages)
    ]
